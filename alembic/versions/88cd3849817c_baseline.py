"""baseline

Revision ID: 88cd3849817c
Revises: 
Create Date: 2025-07-29 03:58:09.534635

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '88cd3849817c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('market_data',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('team', sa.String(), nullable=False),
    sa.Column('opponent', sa.String(), nullable=False),
    sa.Column('game_date', sa.DateTime(), nullable=False),
    sa.Column('data_type', sa.String(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_market_data_game_date'), 'market_data', ['game_date'], unique=False)
    op.create_index(op.f('ix_market_data_team'), 'market_data', ['team'], unique=False)
    op.create_table('sentiment_data',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('team', sa.String(), nullable=False),
    sa.Column('opponent', sa.String(), nullable=False),
    sa.Column('game_date', sa.DateTime(), nullable=False),
    sa.Column('sentiment_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('sentiment_volume', sa.Integer(), nullable=True),
    sa.Column('sources', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sentiment_data_game_date'), 'sentiment_data', ['game_date'], unique=False)
    op.create_index(op.f('ix_sentiment_data_team'), 'sentiment_data', ['team'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('subscription_tier', sa.String(), nullable=True),
    sa.Column('stripe_customer_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('audit_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('resource_type', sa.String(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_log_created_at'), 'audit_log', ['created_at'], unique=False)
    op.create_index(op.f('ix_audit_log_user_id'), 'audit_log', ['user_id'], unique=False)
    op.create_table('automation_rules',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('rule_type', sa.String(), nullable=False),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('actions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_automation_rules_user_id'), 'automation_rules', ['user_id'], unique=False)
    op.create_table('marketplace_accounts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('platform', sa.String(), nullable=False),
    sa.Column('access_token', sa.String(), nullable=False),
    sa.Column('refresh_token', sa.String(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('account_id', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_marketplace_accounts_platform'), 'marketplace_accounts', ['platform'], unique=False)
    op.create_index(op.f('ix_marketplace_accounts_user_id'), 'marketplace_accounts', ['user_id'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notifications_is_read'), 'notifications', ['is_read'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_table('rate_limits',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('endpoint', sa.String(), nullable=False),
    sa.Column('request_count', sa.Integer(), nullable=True),
    sa.Column('window_start', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('season_tickets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('team', sa.String(), nullable=False),
    sa.Column('league', sa.String(), nullable=False),
    sa.Column('venue', sa.String(), nullable=False),
    sa.Column('section', sa.String(), nullable=False),
    sa.Column('row', sa.String(), nullable=False),
    sa.Column('seat', sa.String(), nullable=False),
    sa.Column('season_year', sa.Integer(), nullable=False),
    sa.Column('cost_basis', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('total_games', sa.Integer(), nullable=True),
    sa.Column('games_remaining', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_season_tickets_team'), 'season_tickets', ['team'], unique=False)
    op.create_index(op.f('ix_season_tickets_user_id'), 'season_tickets', ['user_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_token', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('device_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_token')
    )
    op.create_table('listings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('season_ticket_id', sa.UUID(), nullable=False),
    sa.Column('game_date', sa.DateTime(), nullable=False),
    sa.Column('platform', sa.String(), nullable=False),
    sa.Column('listing_id', sa.String(), nullable=True),
    sa.Column('price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('original_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('final_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('sold_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['season_ticket_id'], ['season_tickets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_listings_game_date'), 'listings', ['game_date'], unique=False)
    op.create_index(op.f('ix_listings_season_ticket_id'), 'listings', ['season_ticket_id'], unique=False)
    op.create_index(op.f('ix_listings_status'), 'listings', ['status'], unique=False)
    op.create_table('ai_predictions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('listing_id', sa.UUID(), nullable=False),
    sa.Column('model_type', sa.String(), nullable=False),
    sa.Column('predicted_value', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('confidence_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['listing_id'], ['listings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_predictions_listing_id'), 'ai_predictions', ['listing_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ai_predictions_listing_id'), table_name='ai_predictions')
    op.drop_table('ai_predictions')
    op.drop_index(op.f('ix_listings_status'), table_name='listings')
    op.drop_index(op.f('ix_listings_season_ticket_id'), table_name='listings')
    op.drop_index(op.f('ix_listings_game_date'), table_name='listings')
    op.drop_table('listings')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_season_tickets_user_id'), table_name='season_tickets')
    op.drop_index(op.f('ix_season_tickets_team'), table_name='season_tickets')
    op.drop_table('season_tickets')
    op.drop_table('rate_limits')
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_is_read'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_marketplace_accounts_user_id'), table_name='marketplace_accounts')
    op.drop_index(op.f('ix_marketplace_accounts_platform'), table_name='marketplace_accounts')
    op.drop_table('marketplace_accounts')
    op.drop_index(op.f('ix_automation_rules_user_id'), table_name='automation_rules')
    op.drop_table('automation_rules')
    op.drop_index(op.f('ix_audit_log_user_id'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_created_at'), table_name='audit_log')
    op.drop_table('audit_log')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_sentiment_data_team'), table_name='sentiment_data')
    op.drop_index(op.f('ix_sentiment_data_game_date'), table_name='sentiment_data')
    op.drop_table('sentiment_data')
    op.drop_index(op.f('ix_market_data_team'), table_name='market_data')
    op.drop_index(op.f('ix_market_data_game_date'), table_name='market_data')
    op.drop_table('market_data')
    # ### end Alembic commands ###
